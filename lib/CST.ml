(* Generated by ocaml-tree-sitter. *)
(*
   html grammar

   entrypoint: document
*)

open! Sexplib.Conv
open Tree_sitter_run

type semgrep_metavariable = Token.t

type implicit_end_tag = Token.t

type pat_03aa317 = Token.t (* pattern [^>]+ *)

type style_start_tag_name = Token.t

type attribute_value = Token.t (* pattern "[^<>\"'=\\s]+" *)

type pat_58fbb2e = Token.t (* pattern "[^']+" *)

type entity =
  Token.t (* pattern &(#([xX][0-9a-fA-F]{1,6}|[0-9]{1,5})|[A-Za-z]{1,30});? *)

type erroneous_end_tag_name = Token.t

type raw_text = Token.t

type text = Token.t (* pattern [^<>&\s]([^<>&]*[^<>&\s])? *)

type pat_98d585a = Token.t (* pattern "[^\"]+" *)

type script_start_tag_name = Token.t

type start_tag_name = Token.t

type doctype = Token.t (* pattern [Dd][Oo][Cc][Tt][Yy][Pp][Ee] *)

type end_tag_name = Token.t

type attribute_name = Token.t (* pattern "[^<>\"'/=\\s]+" *)

type erroneous_end_tag = (
    Token.t (* "</" *) * erroneous_end_tag_name (*tok*) * Token.t (* ">" *)
)

type quoted_attribute_value = [
    `SQUOT_opt_pat_58fbb2e_SQUOT of (
        Token.t (* "'" *)
      * pat_58fbb2e option
      * Token.t (* "'" *)
    )
  | `DQUOT_opt_pat_98d585a_DQUOT of (
        Token.t (* "\"" *)
      * pat_98d585a option
      * Token.t (* "\"" *)
    )
]

type doctype_ = (
    Token.t (* "<!" *) * doctype (*tok*) * pat_03aa317 * Token.t (* ">" *)
)

type end_tag = [
    `Semg_end_tag of (
        Token.t (* "</" *) * semgrep_metavariable (*tok*) * Token.t (* ">" *)
    )
  | `LTSLASH_end_tag_name_GT of (
        Token.t (* "</" *) * end_tag_name (*tok*) * Token.t (* ">" *)
    )
]

type anon_choice_attr_value_5986531 = [
    `Attr_value of attribute_value (*tok*)
  | `Quoted_attr_value of quoted_attribute_value
]

type attribute = (
    attribute_name (*tok*)
  * (Token.t (* "=" *) * anon_choice_attr_value_5986531) option
)

type style_start_tag = (
    Token.t (* "<" *)
  * style_start_tag_name (*tok*)
  * attribute list (* zero or more *)
  * Token.t (* ">" *)
)

type script_start_tag = (
    Token.t (* "<" *)
  * script_start_tag_name (*tok*)
  * attribute list (* zero or more *)
  * Token.t (* ">" *)
)

type style_element = (style_start_tag * raw_text (*tok*) option * end_tag)

type script_element = (script_start_tag * raw_text (*tok*) option * end_tag)

type start_tag = [
    `Semg_start_tag of (
        Token.t (* "<" *)
      * semgrep_metavariable (*tok*)
      * attribute list (* zero or more *)
      * Token.t (* ">" *)
    )
  | `LT_start_tag_name_rep_attr_GT of (
        Token.t (* "<" *)
      * start_tag_name (*tok*)
      * attribute list (* zero or more *)
      * Token.t (* ">" *)
    )
]

type element = [
    `Start_tag_rep_node_choice_end_tag of (
        start_tag
      * node list (* zero or more *)
      * [ `End_tag of end_tag | `Impl_end_tag of implicit_end_tag (*tok*) ]
    )
  | `Self_clos_tag of (
        Token.t (* "<" *)
      * start_tag_name (*tok*)
      * attribute list (* zero or more *)
      * Token.t (* "/>" *)
    )
]

and node = [
    `Doct_ of doctype_
  | `Entity of entity (*tok*)
  | `Text of text (*tok*)
  | `Elem of element
  | `Script_elem of script_element
  | `Style_elem of style_element
  | `Errons_end_tag of erroneous_end_tag
]

type toplevel_node = [
    `Doct_ of doctype_
  | `Elem of element
  | `Script_elem of script_element
  | `Style_elem of style_element
  | `Errons_end_tag of erroneous_end_tag
  | `Xmld of (
        Token.t (* "<?xml" *)
      * attribute list (* zero or more *)
      * Token.t (* "?>" *)
    )
]

type document = [
    `Rep_topl_node of toplevel_node list (* zero or more *)
  | `Topl_attr of (
        attribute_name (*tok*) * Token.t (* "=" *)
      * anon_choice_attr_value_5986531
    )
]

type comment (* inlined *) = Token.t

type semgrep_end_tag (* inlined *) = (
    Token.t (* "</" *) * semgrep_metavariable (*tok*) * Token.t (* ">" *)
)

type toplevel_attribute (* inlined *) = (
    attribute_name (*tok*) * Token.t (* "=" *)
  * anon_choice_attr_value_5986531
)

type self_closing_tag (* inlined *) = (
    Token.t (* "<" *)
  * start_tag_name (*tok*)
  * attribute list (* zero or more *)
  * Token.t (* "/>" *)
)

type semgrep_start_tag (* inlined *) = (
    Token.t (* "<" *)
  * semgrep_metavariable (*tok*)
  * attribute list (* zero or more *)
  * Token.t (* ">" *)
)

type xmldoctype (* inlined *) = (
    Token.t (* "<?xml" *)
  * attribute list (* zero or more *)
  * Token.t (* "?>" *)
)
