(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_html"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "doctype", None;
  "text", None;
  "pat_58fbb2e", None;
  "pat_98d585a", None;
  "implicit_end_tag", None;
  "end_tag_name", None;
  "attribute_name", None;
  "semgrep_metavariable", None;
  "start_tag_name", None;
  "pat_03aa317", None;
  "raw_text", None;
  "erroneous_end_tag_name", None;
  "style_start_tag_name", None;
  "attribute_value", None;
  "script_start_tag_name", None;
  "quoted_attribute_value",
  Some (
    Alt [|
      Seq [
        Token (Literal "'");
        Opt (
          Token (Name "pat_58fbb2e");
        );
        Token (Literal "'");
      ];
      Seq [
        Token (Literal "\"");
        Opt (
          Token (Name "pat_98d585a");
        );
        Token (Literal "\"");
      ];
    |];
  );
  "semgrep_end_tag",
  Some (
    Seq [
      Token (Literal "</");
      Token (Name "semgrep_metavariable");
      Token (Literal ">");
    ];
  );
  "doctype_",
  Some (
    Seq [
      Token (Literal "<!");
      Token (Name "doctype");
      Token (Name "pat_03aa317");
      Token (Literal ">");
    ];
  );
  "erroneous_end_tag",
  Some (
    Seq [
      Token (Literal "</");
      Token (Name "erroneous_end_tag_name");
      Token (Literal ">");
    ];
  );
  "toplevel_attribute",
  Some (
    Seq [
      Token (Name "attribute_name");
      Token (Literal "=");
      Alt [|
        Token (Name "attribute_value");
        Token (Name "quoted_attribute_value");
      |];
    ];
  );
  "attribute",
  Some (
    Seq [
      Token (Name "attribute_name");
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "attribute_value");
            Token (Name "quoted_attribute_value");
          |];
        ];
      );
    ];
  );
  "end_tag",
  Some (
    Alt [|
      Token (Name "semgrep_end_tag");
      Seq [
        Token (Literal "</");
        Token (Name "end_tag_name");
        Token (Literal ">");
      ];
    |];
  );
  "semgrep_start_tag",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "semgrep_metavariable");
      Repeat (
        Token (Name "attribute");
      );
      Token (Literal ">");
    ];
  );
  "self_closing_tag",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "start_tag_name");
      Repeat (
        Token (Name "attribute");
      );
      Token (Literal "/>");
    ];
  );
  "script_start_tag",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "script_start_tag_name");
      Repeat (
        Token (Name "attribute");
      );
      Token (Literal ">");
    ];
  );
  "style_start_tag",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "style_start_tag_name");
      Repeat (
        Token (Name "attribute");
      );
      Token (Literal ">");
    ];
  );
  "xmldoctype",
  Some (
    Seq [
      Token (Literal "<?xml");
      Repeat (
        Token (Name "attribute");
      );
      Token (Literal "?>");
    ];
  );
  "start_tag",
  Some (
    Alt [|
      Token (Name "semgrep_start_tag");
      Seq [
        Token (Literal "<");
        Token (Name "start_tag_name");
        Repeat (
          Token (Name "attribute");
        );
        Token (Literal ">");
      ];
    |];
  );
  "script_element",
  Some (
    Seq [
      Token (Name "script_start_tag");
      Opt (
        Token (Name "raw_text");
      );
      Token (Name "end_tag");
    ];
  );
  "style_element",
  Some (
    Seq [
      Token (Name "style_start_tag");
      Opt (
        Token (Name "raw_text");
      );
      Token (Name "end_tag");
    ];
  );
  "element",
  Some (
    Alt [|
      Seq [
        Token (Name "start_tag");
        Repeat (
          Token (Name "node");
        );
        Alt [|
          Token (Name "end_tag");
          Token (Name "implicit_end_tag");
        |];
      ];
      Token (Name "self_closing_tag");
    |];
  );
  "node",
  Some (
    Alt [|
      Token (Name "doctype_");
      Token (Name "text");
      Token (Name "element");
      Token (Name "script_element");
      Token (Name "style_element");
      Token (Name "erroneous_end_tag");
    |];
  );
  "toplevel_node",
  Some (
    Alt [|
      Token (Name "doctype_");
      Token (Name "element");
      Token (Name "script_element");
      Token (Name "style_element");
      Token (Name "erroneous_end_tag");
      Token (Name "toplevel_attribute");
      Token (Name "xmldoctype");
    |];
  );
  "fragment",
  Some (
    Repeat (
      Token (Name "toplevel_node");
    );
  );
]

let trans_doctype ((kind, body) : mt) : CST.doctype =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_text ((kind, body) : mt) : CST.text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_58fbb2e ((kind, body) : mt) : CST.pat_58fbb2e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_98d585a ((kind, body) : mt) : CST.pat_98d585a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_implicit_end_tag ((kind, body) : mt) : CST.implicit_end_tag =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_end_tag_name ((kind, body) : mt) : CST.end_tag_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_attribute_name ((kind, body) : mt) : CST.attribute_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_start_tag_name ((kind, body) : mt) : CST.start_tag_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_03aa317 ((kind, body) : mt) : CST.pat_03aa317 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_text ((kind, body) : mt) : CST.raw_text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_erroneous_end_tag_name ((kind, body) : mt) : CST.erroneous_end_tag_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_style_start_tag_name ((kind, body) : mt) : CST.style_start_tag_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_attribute_value ((kind, body) : mt) : CST.attribute_value =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_script_start_tag_name ((kind, body) : mt) : CST.script_start_tag_name =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quoted_attribute_value ((kind, body) : mt) : CST.quoted_attribute_value =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `SQUOT_opt_pat_58fbb2e_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_pat_58fbb2e (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `DQUOT_opt_pat_98d585a_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_pat_98d585a (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_end_tag ((kind, body) : mt) : CST.semgrep_end_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_semgrep_metavariable (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_doctype_ ((kind, body) : mt) : CST.doctype_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_doctype (Run.matcher_token v1),
            trans_pat_03aa317 (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_erroneous_end_tag ((kind, body) : mt) : CST.erroneous_end_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_erroneous_end_tag_name (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_toplevel_attribute ((kind, body) : mt) : CST.toplevel_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_attribute_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Attr_value (
                  trans_attribute_value (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Quoted_attr_value (
                  trans_quoted_attribute_value (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_attribute_name (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Attr_value (
                            trans_attribute_value (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Quoted_attr_value (
                            trans_quoted_attribute_value (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_end_tag ((kind, body) : mt) : CST.end_tag =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_end_tag (
            trans_semgrep_end_tag (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LTSLASH_end_tag_name_GT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_end_tag_name (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_start_tag ((kind, body) : mt) : CST.semgrep_start_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_semgrep_metavariable (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_self_closing_tag ((kind, body) : mt) : CST.self_closing_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_start_tag_name (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_script_start_tag ((kind, body) : mt) : CST.script_start_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_script_start_tag_name (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_style_start_tag ((kind, body) : mt) : CST.style_start_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_style_start_tag_name (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xmldoctype ((kind, body) : mt) : CST.xmldoctype =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_start_tag ((kind, body) : mt) : CST.start_tag =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_start_tag (
            trans_semgrep_start_tag (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LT_start_tag_name_rep_attr_GT (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_start_tag_name (Run.matcher_token v1),
                  Run.repeat
                    (fun v -> trans_attribute (Run.matcher_token v))
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_script_element ((kind, body) : mt) : CST.script_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_script_start_tag (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_raw_text (Run.matcher_token v))
              v1
            ,
            trans_end_tag (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_style_element ((kind, body) : mt) : CST.style_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_style_start_tag (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_raw_text (Run.matcher_token v))
              v1
            ,
            trans_end_tag (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_element ((kind, body) : mt) : CST.element =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Start_tag_rep_node_choice_end_tag (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_start_tag (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_node (Run.matcher_token v))
                    v1
                  ,
                  (match v2 with
                  | Alt (0, v) ->
                      `End_tag (
                        trans_end_tag (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Impl_end_tag (
                        trans_implicit_end_tag (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Self_clos_tag (
            trans_self_closing_tag (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_node ((kind, body) : mt) : CST.node =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Doct_ (
            trans_doctype_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Text (
            trans_text (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Elem (
            trans_element (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Script_elem (
            trans_script_element (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Style_elem (
            trans_style_element (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Errons_end_tag (
            trans_erroneous_end_tag (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_toplevel_node ((kind, body) : mt) : CST.toplevel_node =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Doct_ (
            trans_doctype_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Elem (
            trans_element (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Script_elem (
            trans_script_element (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Style_elem (
            trans_style_element (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Errons_end_tag (
            trans_erroneous_end_tag (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Topl_attr (
            trans_toplevel_attribute (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Xmld (
            trans_xmldoctype (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fragment ((kind, body) : mt) : CST.fragment =
  match body with
  | Children v ->
      Run.repeat
        (fun v -> trans_toplevel_node (Run.matcher_token v))
        v
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_fragment matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

